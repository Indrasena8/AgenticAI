import os
from azure.ai.projects import AIProjectClient
from azure.identity import DefaultAzureCredential
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Connect to Azure AI Project
project_client = AIProjectClient.from_connection_string(
    credential=DefaultAzureCredential(),
    conn_str="westus3.api.azureml.ms;c5d47662-af4d-400e-ace6-ff70828d7d98;az-csi-grp1;agents"
)

postevent_agent_id = "asst_NmLEgta4Izq4wCD59VFvT5Ce"

HACKATHONS_FOLDER = "/Users/indrasena/Indrasena/Studies/CS/Semester4/Agentic AI/hackathons"

def send_email(to_email, subject, body, from_email, from_password):
    msg = MIMEMultipart()
    msg['From'] = from_email
    msg['To'] = to_email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()
    server.login(from_email, from_password)
    server.sendmail(from_email, to_email, msg.as_string())
    server.quit()

def request_postevent_summary(event_filename):
    """Send a request to agent based on the selected hackathon JSON file."""

    # Create new conversation thread
    thread = project_client.agents.create_thread()

    # Construct the message
    message_content = (
        f"Please generate a post-event summary report based on the event file `{event_filename}` "
        f"from the /hackathons/ folder."
    )

    # Send the message
    project_client.agents.create_message(
        thread_id=thread.id,
        role="user",
        content=message_content
    )

    # Run agent
    run = project_client.agents.create_and_process_run(
        thread_id=thread.id,
        agent_id=postevent_agent_id
    )

    # Fetch response
    messages = project_client.agents.list_messages(thread_id=thread.id)
    return messages.text_messages[0].text["value"]

def run_postevent_process(student_emails, mentor_emails, from_email, from_password, photos_link):
    print("\nüìÇ Listing available Hackathon files...\n")

    files = [f for f in os.listdir(HACKATHONS_FOLDER) if f.endswith('.json')]
    if not files:
        print("‚ùå No hackathon files found.")
        return

    for idx, file in enumerate(files, start=1):
        print(f"{idx}. {file}")

    selection = input("\nEnter the number of the hackathon event to generate summary for: ").strip()

    try:
        selection_idx = int(selection) - 1
        if selection_idx < 0 or selection_idx >= len(files):
            print("‚ùå Invalid selection. Exiting.")
            return
    except Exception as e:
        print(f"‚ùå Error parsing selection: {e}")
        return

    selected_file = files[selection_idx]

    print(f"\nüõ† Requesting Post-Event Summary for {selected_file}...")

    summary_text = request_postevent_summary(selected_file)

    print("\nüìù POST-EVENT SUMMARY GENERATED BY AGENT:")
    print("-" * 60)
    print(summary_text)
    print("-" * 60)

    send_postevent_emails(student_emails, mentor_emails, from_email, from_password, photos_link)
    generate_report_file(summary_text, selected_file)
    print("‚úÖ Post-event process complete.")

def send_postevent_emails(student_emails, mentor_emails, from_email, from_password, photos_link):
    for to_email in student_emails:
        subject = "Thanks for Participating ‚Äì CSI Hackathon Highlights!"
        body = f"""
Hi there,

Thank you for being part of our Hackathon! We hope you learned a lot and had a great experience.

Here are the event highlights: {photos_link}

See you next time!
- CSI Hackathon Team
""".strip()
        try:
            print(f"üì§ Sending appreciation email to: {to_email}")
            send_email(to_email, subject, body, from_email, from_password)
            print(f"‚úÖ Sent to {to_email}")
        except Exception as e:
            print(f"‚ùå Failed to send to {to_email}: {str(e)}")

    for to_email in mentor_emails:
        subject = "Thank You for Mentoring ‚Äì CSI Hackathon"
        body = f"""
Hi,

Thank you for mentoring at our Hackathon! Your guidance had a real impact on our participants' journey.

We appreciate the time and knowledge you shared.

Hope to see you again!
- CSI Hackathon Team
""".strip()
        try:
            print(f"üì§ Sending thank-you email to: {to_email}")
            send_email(to_email, subject, body, from_email, from_password)
            print(f"‚úÖ Sent to {to_email}")
        except Exception as e:
            print(f"‚ùå Failed to send to {to_email}: {str(e)}")

def generate_report_file(summary_text, filename_base):
    report_filename = f"post_event_summary_{filename_base.replace('.json', '')}.txt"
    with open(report_filename, "w") as file:
        file.write(summary_text)
    print(f"üìÑ Organizer report saved as {report_filename}")